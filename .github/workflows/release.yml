name: Video Converter - Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release from'
        required: true
        default: 'main'
        type: string
      force_release:
        description: 'Force a release even if no relevant commits are found'
        required: false
        default: false
        type: boolean
      manual_version:
        description: 'Manually specify the version (e.g., 1.2.3, 1.2.3-beta1, 1.2.3-test). Required if force_release is true.'
        required: false
        type: string

permissions:
  contents: write
  actions: write

env:
  NODE_VERSION: '22.x'
  GO_VERSION: '1.25'

jobs:
  determine-version:
    name: Determine Next Version
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.set_version.outputs.version }}
      should_release: ${{ steps.set_version.outputs.release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine next version (Semantic Release or Manual)
        id: set_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event.inputs.force_release }}" == "true" ]]; then
            echo "Forcing release."
            if [[ -z "${{ github.event.inputs.manual_version }}" ]]; then
              echo "::error::Manual version must be provided when force_release is true."
              exit 1
            fi
            MANUAL_VERSION="${{ github.event.inputs.manual_version }}"
            # Validation regex to allow SemVer with optional pre-release identifiers
            SEMVER_REGEX="^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$"
            if ! [[ "$MANUAL_VERSION" =~ $SEMVER_REGEX ]]; then
               echo "::error::Manual version '$MANUAL_VERSION' is not valid. Use format X.Y.Z or X.Y.Z-prerelease (e.g., 1.2.3, 1.2.3-beta1, 1.2.3-rc.2)."
               exit 1
            fi
            echo "Using manual version: $MANUAL_VERSION"
            echo "release_published=true" >> $GITHUB_OUTPUT
            echo "version=$MANUAL_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Determining version using semantic-release..."
            # Run semantic-release in dry run mode and capture output
            # Use --no-ci to prevent potential issues if semantic-release detects a CI environment incorrectly
            output=$(pnpm exec semantic-release --dry-run --no-ci)
            echo "$output" # Log output for debugging

            # Check if a release would be published (Handles standard X.Y.Z versions)
            # NOTE: This regex might need adjustment if semantic-release outputs pre-release versions differently
            if echo "$output" | grep -q "Published release"; then
              echo "release_published=true" >> $GITHUB_OUTPUT
              # This regex extracts standard X.Y.Z versions. Adjust if semantic-release outputs pre-releases here too.
              version=$(echo "$output" | grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+')
              if [ -z "$version" ]; then
                # Attempt to extract pre-release version as fallback - adjust regex as needed for semantic-release output format
                version=$(echo "$output" | grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?')
                 if [ -z "$version" ]; then
                    echo "::error::Could not extract version from semantic-release output."
                    exit 1
                 fi
              fi
              echo "version=${version}" >> $GITHUB_OUTPUT
              echo "Determined next version: ${version}"
            else
              echo "release_published=false" >> $GITHUB_OUTPUT
              echo "version=skip" >> $GITHUB_OUTPUT
              echo "No release will be published based on commits."
            fi
          fi

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true'
    uses: ./.github/workflows/build-jobs.yml
    permissions:
      contents: read
      packages: write
    with:
      build_docker: true
      push_docker: true
      app_version: ${{ needs.determine-version.outputs.next_version }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [determine-version, build-and-push-docker]
    if: needs.determine-version.outputs.should_release == 'true'
    steps:
      - name: Checkout code from specified branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install root dependencies (including semantic-release)
        run: pnpm install --frozen-lockfile

      - name: Run semantic-release (perform release)
        if: github.event.inputs.force_release == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PNPM_SCRIPT_SHELL: bash
          DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ needs.determine-version.outputs.next_version }}
        run: |
          echo "Docker image available at: $DOCKER_IMAGE" >> $GITHUB_STEP_SUMMARY
          pnpm exec semantic-release --no-ci

      - name: Configure Git user
        if: github.event.inputs.force_release == 'true'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Create and Push Git Tag (Manual Force)
        if: github.event.inputs.force_release == 'true'
        env:
          TAG_NAME: v${{ needs.determine-version.outputs.next_version }}
        run: |
          echo "Attempting to create and push tag: $TAG_NAME"
          # Check if tag exists locally or remotely before creating
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "::warning::Tag $TAG_NAME already exists locally. Skipping tag creation."
          elif git ls-remote --tags origin refs/tags/$TAG_NAME | grep -q "$TAG_NAME"; then
            echo "::warning::Tag $TAG_NAME already exists remotely. Skipping tag creation."
          else
            git tag "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "Tag $TAG_NAME created and pushed."
          fi

      - name: Create GitHub Release (Manual Force)
        if: github.event.inputs.force_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: v${{ needs.determine-version.outputs.next_version }}
          NEXT_VERSION: ${{ needs.determine-version.outputs.next_version }}
        run: |
          DOCKER_IMAGE="ghcr.io/${{ github.repository }}:$NEXT_VERSION"
          echo "Creating GitHub release for tag $TAG_NAME"
          echo "Docker image: $DOCKER_IMAGE" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Pull the Docker image:" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "docker pull $DOCKER_IMAGE" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "## Run with docker-compose:" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "VERSION=$NEXT_VERSION docker-compose up -d" >> release_notes.md
          echo '```' >> release_notes.md
          
          gh release create "$TAG_NAME" \
            --title "Release $NEXT_VERSION" \
            --notes-file release_notes.md \
            --target "${{ github.event.inputs.branch }}"

      - name: Deployment Summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.determine-version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.event.inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Image" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ github.repository }}:${{ needs.determine-version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Pull and Run" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ github.repository }}:${{ needs.determine-version.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "VERSION=${{ needs.determine-version.outputs.next_version }} docker-compose up -d" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
