name: Release Video Converter

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release from'
        required: true
        default: 'main'
        type: string
      force_release:
        description: 'Force a release even if no relevant commits are found'
        required: false
        default: false
        type: boolean
      manual_version:
        description: 'Manually specify the version number (e.g., 1.2.3). Only used if force_release is true.'
        required: false
        type: string

permissions:
  contents: write
  actions: write

env:
  NODE_VERSION: '22.x'
  PNPM_VERSION: '10.9.0'
  GO_VERSION: '1.24'

jobs:
  determine-version:
    name: Determine Next Version
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.set_version.outputs.version }}
      should_release: ${{ steps.set_version.outputs.release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine next version (Semantic Release or Manual)
        id: set_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event.inputs.force_release }}" == "true" ]]; then
            echo "Forcing release."
            if [[ -z "${{ github.event.inputs.manual_version }}" ]]; then
              echo "::error::Manual version must be provided when force_release is true."
              exit 1
            fi
            MANUAL_VERSION="${{ github.event.inputs.manual_version }}"
            # Basic validation for version format (e.g., X.Y.Z)
            if ! [[ "$MANUAL_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
               echo "::error::Manual version '$MANUAL_VERSION' is not valid. Use format X.Y.Z (e.g., 1.2.3)."
               exit 1
            fi
            echo "Using manual version: $MANUAL_VERSION"
            echo "release_published=true" >> $GITHUB_OUTPUT
            echo "version=$MANUAL_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Determining version using semantic-release..."
            # Run semantic-release in dry run mode and capture output
            # Use --no-ci to prevent interference with CI checks if semantic-release detects CI environment
            output=$(pnpm exec semantic-release --dry-run --no-ci) # Use pnpm exec
            echo "$output" # Log output for debugging

            # Check if a release would be published
            # Regex looks for "Published release X.Y.Z on branch main"
            if echo "$output" | grep -q "Published release"; then
              echo "release_published=true" >> $GITHUB_OUTPUT
              version=$(echo "$output" | grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+')
              if [ -z "$version" ]; then
                echo "::error::Could not extract version from semantic-release output."
                exit 1
              fi
              echo "version=${version}" >> $GITHUB_OUTPUT
              echo "Determined next version: ${version}"
            else
              echo "release_published=false" >> $GITHUB_OUTPUT
              echo "version=skip" >> $GITHUB_OUTPUT
              echo "No release will be published based on commits."
            fi
          fi

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true'
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code from specified branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Setup pnpm ${{ env.PNPM_VERSION }}
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Install dependencies
      run: pnpm install

    - name: Build frontend
      run: pnpm run build

    - name: Run frontend tests
      run: pnpm test

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true'
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code from specified branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.2
          working-directory: ./backend

      - name: Check formatting
        run: test -z "$(gofmt -l .)"

      - name: Build backend with version
        env:
          NEXT_VERSION: ${{ needs.determine-version.outputs.next_version }}
        run: |
          echo "Building backend version: $NEXT_VERSION"
          go build -v -ldflags="-X main.version=$NEXT_VERSION -s -w" -o ../video-converter-app ./cmd/server/main.go

      - name: Run backend tests
        run: go test -v ./...

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: video-converter-app

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [determine-version, frontend-build, backend-build]
    if: needs.determine-version.outputs.should_release == 'true'

    steps:
      - name: Checkout code from specified branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install root dependencies (including semantic-release)
        run: pnpm install --frozen-lockfile

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: .

      - name: Zip frontend assets for release
        run: |
          cd frontend/dist
          zip -r ../../frontend-dist.zip .
          cd ../.. # Go back to the original directory

      - name: Run semantic-release (perform release)
        if: github.event.inputs.force_release == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PNPM_SCRIPT_SHELL: bash
        run: pnpm exec semantic-release --no-ci

      - name: Configure Git user
        if: github.event.inputs.force_release == 'true'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create and Push Git Tag (Manual Force)
        if: github.event.inputs.force_release == 'true'
        env:
          TAG_NAME: v${{ needs.determine-version.outputs.next_version }}
        run: |
          echo "Creating and pushing tag: $TAG_NAME"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "::warning::Tag $TAG_NAME already exists locally."
          elif git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "::warning::Tag $TAG_NAME already exists remotely."
          else
            git tag "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: Create GitHub Release (Manual Force)
        if: github.event.inputs.force_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: v${{ needs.determine-version.outputs.next_version }}
          NEXT_VERSION: ${{ needs.determine-version.outputs.next_version }}
        run: |
          echo "Creating GitHub release for tag $TAG_NAME"
          gh release create "$TAG_NAME" \
            --title "Release $NEXT_VERSION" \
            --notes "Manually forced release for version $NEXT_VERSION." \
            --target "${{ github.event.inputs.branch }}" \
            "./video-converter-app#Backend Binary ($TAG_NAME)" \
            "./frontend-dist.zip#Frontend Assets ($TAG_NAME)"

      - name: Placeholder for deployment steps
        run: |
          echo "Starting deployment process for branch ${{ github.event.inputs.branch }}..."
          echo "Deployment process finished."
